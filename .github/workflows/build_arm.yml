name: Build ARM packages

on: [push, pull_request]

jobs:
  build_job:
    runs-on: ubuntu-20.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: buster
          - arch: armv7
            distro: buster
          - arch: aarch64
            distro: ubuntu20.04

    steps:
      - uses: actions/checkout@v2.1.0
      - name: "Create build directory"
        run: mkdir cmake_build
      - name: "Create ccache directory"
        run: mkdir .ccache
      - name: "Set up ccache cache"
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ matrix.distro }}-${{ matrix.arch }}-ccache-${{ github.head_ref }}-${{ github.run_number }}
          restore-keys: |
            ${{ matrix.distro }}-${{ matrix.arch }}-ccache-${{ github.head_ref }}
            ${{ matrix.distro }}-${{ matrix.arch }}-ccache
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Build Arm
        id: build_arm
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Create an artifacts and cache directory
          setup: |
            mkdir -p "${PWD}/artifacts"
            mkdir -p "${PWD}/.ccache"

          # Mount the artifacts directory and ccache
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
            --volume "${PWD}/.ccache:/ccache"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: mixxx-${{ matrix.distro }}_${{ matrix.arch }}

          shell: /bin/sh

          install: |
            apt-get update -q -y
            apt-get install -q -y g++ git scons cmake ccache
          # Configure and run build
          run: |
            tools/arm_buildenv.sh ${{ matrix.distro }}
            export CCACHE_DIR=/ccache
            ccache -M 5G
            export CTEST_PARALLEL_LEVEL="$(nproc)"
            export CMAKE_BUILD_PARALLEL_LEVEL="$(nproc)"
            export PATH="$HOME/.local/bin:$PATH"
            export CMAKEFLAGS="-DCMAKE_BUILD_TYPE=Release -DBATTERY=ON -DBROADCAST=ON -DBULK=ON -DDEBUG_ASSERTIONS_FATAL=ON -DHID=ON -DLILV=ON -DOPUS=ON -DQTKEYCHAIN=ON -DVINYLCONTROL=ON -DENGINEPRIME=ON"
            export CMAKEFLAGS_EXTRA="-DFAAD=ON -DKEYFINDER=ON -DLOCALECOMPARE=ON -DMAD=ON -DMODPLUG=ON -DWAVPACK=ON -DWARNINGS_FATAL=ON"
            export GTEST_COLOR="1"
            export CTEST_OUTPUT_ON_FAILURE="1"
            export QT_QPA_PLATFORM="offscreen"
            export CCACHE_NOCOMPRESS="true"
            cd cmake_build
            cmake -DCMAKE_INSTALL_PREFIX=/usr ..
            cmake -L $CMAKEFLAGS $CMAKEFLAGS_EXTRA ..
            cmake --build .
            cpack -G DEB
            cp *.deb "/artifacts/"
            echo "Produced artifact ${artifact_name} at /artifacts/"
            ccache -s
            ctest --timeout 45

      - name: "Deploy artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: mixxx-${{ matrix.distro }}_${{ matrix.arch }}
          path: artifacts/*.deb
